# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  beats {
    port => 5044
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    #user => "elastic"
    #password => "changeme"
  }
}

input {
  beats {
    port => 5044
  }
}
filter {
    grok {
      match => { 
        "message" => '%{IP:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:bytes} \"%{DATA:address}\" \"%{DATA:http_user_agent}\"'
      }
    }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
}


input {
  beats {
    port => 5044
  }
}
filter {
    grok {
      match => { 
        "message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:httpMethod} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpVersion}" %{NUMBER:responseCode} %{NUMBER:bytesSent} "%{URI:referrer}" "%{GREEDYDATA:userAgent}'
      }
    }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
}

input {
    beats {
        port => "5044"
        host => "0.0.0.0"
    }
}

filter {
    grok {
      10.65.43.1 - - [19/Jul/2023:00:06:07 +0700] "POST /api/ds/query HTTP/1.0" 200 633 "http://pantau.tribi.adaptivenetlab.si
te/d/cluster1/kube-cluster-overview?orgId=1&refresh=10s" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (
KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"

180.244.135.238 - - [19/Jul/2023:03:31:08 +0000] "GET /favicon.ico HTTP/1.1" 404 184 "http://api.tribi.adaptivenetlab.si
te/video" "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.
36"
      
      '%{IP:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{DATA:URI} %{DATA:version}" %{INT:status_code} %{NUMBER:bytes} "%{DATA:address}" \"%{DATA:http_user_agent}\" \"-\" "%{DATA:host_address}" sn="%{DATA:server_name}" rt=%{NUMBER:request_time} ua=".*" ut="%{NUMBER:upstream_request_time}" ul="%{NUMBER:upstream_response_length}" cs=%{DATA:content_serial} http_referer=%{DATA:http_referer} geoip_country_code="%{DATA:geoip_country_code}" geoip_city_code="%{DATA:geoip_city_code}" tcpudpaddr="%{DATA:tcpudpaddr}"'
      
      match => { 'message' => '%{IP:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{DATA:URI} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:bytes} "%{DATA:address}" \"%{DATA:useragent}\" \"-\" "%{DATA:host_address}"  geoip_country_code="%{DATA:geoip_country_code}" geoip_city_code="%{DATA:geoip_city_code}"' }
      remove_field => 'message'
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }
    geoip {
      source => "client"
      target => "geoip"
      database => "/var/opt/GeoLite2-City_20230714/GeoLite2-City.mmdb"
      add_field => ["[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
      add_field => [ "[geoip][location]", "%{[geoip][city_name]}, %{[geoip][country_name]}" ]
    }
    mutate {
       add_field => {
           "logpath" => "%{[log][file][path]}"
           "log_type" => "%{[fields][log_type]}"
           "host" => "%{[host][name]}"
        }
        remove_field => ["log", "tags", "input", "fields", "host", "agent", "ecs"]
    }
}

output {
  elasticsearch {
    id => "nginx-logs"
    manage_template => false
    hosts => ["http://elasticsearch:9200"]
    index => "nginx-access-logs-%{+YYYY.MM.dd}"
  }
}


//
filter {
    grok {
      match => { 'message' => '%{IP:client} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:bytes} "%{DATA:referer}" "%{DATA:user_agent}" "%{DATA:host}" "%{NUMBER:response_time}" "%{DATA:upstream_host}" "%{NUMBER:upstream_response_time}"'}
      remove_field => 'message'
    }
}

{'%{IPORHOST:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:statuscode} "%{NUMBER:respone_bytes} "%{DATA:address}" "%{DATA:useragent}" "%{DATA:host}" "%{NUMBER:request_time}" "%{DATA:server_name}" "%{DATA:respone_time}"'}




input {
    beats {
        port => "5044"
        host => "0.0.0.0"
    }
}

filter {
    grok {
      match => { 'message' => '%{IPORHOST:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:statuscode} %{NUMBER:response_bytes} "%{DATA:address}" "%{DATA:useragent}" "%{DATA:host}" %{QS:request_time} "%{DATA:server_name}" %{QS:response_time}' }
      remove_field => 'message'
:message=>"Expected one of [ \\t\\r\\n], \"#\", \"{\", \"}\" at line 10, column 33 (byte 131) after filter {\n    grok {\n      match => { 'message' => ''", :backtrace=>["/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:32:in `compile_imperative'",
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }
    mutate {
       add_field => {
           "logpath" => "%{[log][file][path]}"
           "log_type" => "%{[fields][log_type]}"
           "host" => "%{[host][name]}"
        }
        remove_field => ["log", "tags", "input", "fields", "host", "agent", "ecs"]
    }
}

output {
  elasticsearch {
    id => "nginx-logs"
    manage_template => false
    hosts => ["http://elasticsearch:9200"]
    index => "nginx-access-logs-%{+YYYY.MM.dd}"
  }
}


nginx.conf lab
log_format my_nginx_log '$remote_addr - - [$time_local] "$request" 
$status $body_bytes_sent "$http_referer" "$http_user_agent" "$host" 
sn="$server_name" rt=$request_time ua="$upstream_addr" 
ut="$upstream_response_time" ul="$upstream_response_length" 
cs=$content_serial geoip_country_code="$geoip_country_code" 
geoip_city_code="$geoip_city_code" tcpudpaddr="$tcpudpaddr"';

'%{IP:client} - - \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{DATA:URI} 
%{DATA:version}" %{INT:status_code} %{NUMBER:bytes} "%{DATA:address}" 
\"%{DATA:http_user_agent}\" \"-\" "%{DATA:host_address}" sn="%{DATA:server_name}"
 rt=%{NUMBER:request_time} ua=".*"
  ut="%{NUMBER:upstream_request_time}" ul="%{NUMBER:upstream_response_length}" 
  cs=%{DATA:content_serial} http_referer=%{DATA:http_referer} 
  geoip_country_code="%{DATA:geoip_country_code}" geoip_city_code="%{DATA:geoip_city_code}" 
  tcpudpaddr="%{DATA:tcpudpaddr}"'

203.0.113.1 - - [17/Jul/2023:14:25:32 +0700] "GET /example-page HTTP/1.1" 200 1024 "https://example.com/referer-page" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.1234.567 Safari/537.36" "example.com" sn="nginx-server" rt=0.123 ua="127.0.0.1:8080" ut=0.456 ul=1024 cs=0 geoip_country_code="US" geoip_city_code="NY" tcpudpaddr="-"

http {
  log_format main_nginx_log '$remote_addr - - [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'
                            '"$http_host" "$request_time" "$server_name" "$upstream_addr" "$upstream_response_time"';

}

http {
  log_format custom_log '$remote_addr - - [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'
                              '"$http_host" "$request_time" "$server_name" "$upstream_request_time" "$upstream_response_time"';
}

//salah
ubuntu@reverse:~$ cat /etc/nginx/nginx.conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

http {

        ##
        # Basic Settings
        ##
        client_max_body_size 1000M;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        # server_tokens off;

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # SSL Settings
        ##

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;

        ##
        # Log Format
        ##
        log_format main_nginx_log '$remote_addr - - [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'                            '"$http_host" "$request_time" "$server_name" "$upstream_addr" "$upstream_response_time"';

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        gzip on;

        # gzip_vary on;
        # gzip_proxied any;
        # gzip_comp_level 6;
        # gzip_buffers 16 8k;
        # gzip_http_version 1.1;
        # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}


#mail {
#       # See sample authentication script at:
#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#       # auth_http localhost/auth.php;
#       # pop3_capabilities "TOP" "USER";
#       # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#       server {
#               listen     localhost:110;
#               protocol   pop3;
#               proxy      on;
#       }
#
#       server {
#               listen     localhost:143;
#               protocol   imap;
#               proxy      on;
#       }
#}
ubuntu@reverse:~$ sudo nano /etc/nginx/nginx.conf
ubuntu@reverse:~$ sudo nano /etc/nginx/nginx.conf
ubuntu@reverse:~$ sudo nginx -s reload
nginx: [warn] the "ssl" directive is deprecated, use the "listen ... ssl" directive instead in /etc/nginx/conf.d/coba.conf:17
nginx: [warn] the "ssl" directive is deprecated, use the "listen ... ssl" directive instead in /etc/nginx/conf.d/coba.conf:55
nginx: [emerg] unknown "connection_upgrade" variable

 